# .github/workflows/deploy.yml
name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to deploy (e.g., 1, 2)'
        required: true

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            # Логинимся в Yandex CR на сервере
            echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' | docker login --username json_key --password-stdin cr.yandex

            # Останавливаем и удаляем старый контейнер, если он есть
            docker stop my-app || true
            docker rm my-app || true

            # Скачиваем указанный образ (используем latest для простоты)
            docker pull cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:latest

            # Запускаем новый контейнер
            docker run -d -p 80:3000 --name my-app --restart always cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:latest

      - name: Add Deployment Comment to Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ищем Issue по заголовку
          ISSUE_NUMBER=$(gh issue list --search "in:title Release ${{ github.event.inputs.release_version }} Ready" --json number --jq '.[0].number')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Could not find an issue for release ${{ github.event.inputs.release_version }}"
          else
            gh issue comment $ISSUE_NUMBER \
              --body "✅ **Deployment Successful!**

              Release **${{ github.event.inputs.release_version }}** was deployed to production by @${{ github.actor }}.

              Application is live at: http://${{ secrets.VM_HOST }}"
          fi